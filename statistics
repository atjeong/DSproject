#include <stdio.h>
#include <stdlib.h>

typedef struct foruser{
char id[50] ;
char signtime[50];
char screenname[50];
}foruser;
typedef struct forfriends{
char myid[50];
char friendsid[50];
}forfriends;
typedef struct forword{
char userid[50];
char time[50];
char word[50];
struct forword* next;
}forword;

typedef struct Adj {
  int id;
  struct Adj* next;
} Adj;

typedef struct node{
    char id[50];
    char signtime[50];
    char screenname[50];
    Adj* friendsid;
    forword* word;
    struct node* next;
    struct node* prev;
    int numoffriends;
    int numofwords;
}node;

void initial(node* node){
    node->friendsid= NULL;
    node->word = NULL;
    node->next = NULL;
    node->prev= NULL;
    node->numoffriends=0;
    node->numofwords = 0;
}


typedef struct List{
    node* header;
}List;

    void insert(struct List* list, struct node* node){
    node->next = list->header;
    if(list->header != NULL)
        list->header->prev = node;
    list->header = node;
    node->prev = NULL;
    }

    node* search(struct List* list, char* id){
    node* x = list->header;
    while (x!= NULL && x->id != id)
        x = x->next;
    return x;
    }
    int min_friend_search(struct List* list){
        node* x = list->header;
        int min = x->numoffriends;
        while (x!= NULL){
            if(x->numoffriends < min) min = x->numoffriends;
            x = x->next;}
        return min;
    }
    int min_word_search(struct List* list){
        node* x = list->header;
        int min = x->numofwords;
        while (x!= NULL){
            if(x->numofwords < min) min = x->numofwords;
            x = x->next;}
        return min;
    }
   int max_friend_search(struct List* list){
        node* x = list->header;
        int max = x->numoffriends;
        while (x!= NULL){
            if(x->numoffriends > max) max = x->numoffriends;
            x = x->next;}
        return max;
    }
    int max_word_search(struct List* list){
        node* x = list->header;
        int max = x->numofwords;
        while (x!= NULL){
            if(x->numofwords > max) max = x->numofwords;
            x = x->next;}
        return max;
    }

List list;
int user_num, friends_num , word_num,i;
int main()
{

int select;
list.header= NULL;

read_data_files();
display_statistics();

    return 0;
}


   void read_data_files(){

  //open files
    FILE * user = fopen("user.txt","rt");
    FILE * friends = fopen("friend.txt","rt");
    FILE * word = fopen("word.txt","rt");

    if(user == NULL){
        printf("user_not_load!");
        return -1;
    }
    if(friends == NULL){
        printf("user_not_load!");
        return -1;
    }
    if(word == NULL){
        printf("user_not_load!");
        return -1;
    }
    //read files
user_num=0, friends_num =0, word_num=0,i;
  while(1)
    {
        foruser* user1= (foruser*)malloc(sizeof(foruser));
        fgets(user1->id,50,user);
        fgets(user1->signtime,50,user);
        fgets(user1->screenname,50,user);
        fgetc(user);
        if(feof(user)) break; user_num++;
        //new node insert
        node* node1 = (node*)malloc(sizeof(node)); initial(node1);
        strcpy(node1->id ,user1->id);
        strcpy(node1->signtime,user1->signtime);
        strcpy(node1->screenname, user1->screenname);
        insert(&list, node1);
    }

   while(1)
    {
        forfriends* friends1 = (forfriends*)malloc(sizeof(forfriends));
        fgets(friends1->myid,50,friends);
        fgets(friends1->friendsid,50,friends);
        fgetc(friends);
        if(feof(friends)) break; friends_num++;
        node* temp_node = search(&list,&friends1->myid);
        Adj* a = (Adj *)malloc(sizeof(Adj));
        a->id = friends1->friendsid;
        a->next = temp_node->friendsid;
        temp_node->friendsid = a;
        temp_node->numoffriends++;
    }


   while(1)
    {
        forword* word1= (forword*)malloc(sizeof(forword));
        fgets(word1->userid,50,word);
        fgets(word1->time,50,word);
        fgets(word1->word,50,word);
        fgetc(word);
        if(feof(word)) break; word_num++;
        node* temp_node = search(&list,&word1->userid);
        word1->next = temp_node->word;
        temp_node->word = &word1;
        temp_node->numofwords++;

    }

    printf("Total users: %d\n",user_num);
    printf("Total friendship records: %d\n", friends_num);
    printf("Total tweets: %d\n", word_num);

    }

   void display_statistics(){
        int min, max;
        float average_friends = friends_num/user_num;
        printf("Average number of friends: %f\n",average_friends);
        min = min_friend_search(&list);
        max = max_friend_search(&list);
        printf("Minimum friends: %d\n", min);
        printf("Maximum number of friends: %d\n",max);

        float average_words = word_num/user_num;
        printf("Average tweets per user: %f\n", average_words);
        min = min_word_search(&list); max = max_word_search(&list);
        printf("Minimum tweets per user: %d\n",min);
        printf("Maximum tweets per user: %d\n",max);
    }

