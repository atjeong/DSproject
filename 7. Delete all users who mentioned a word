
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct foruser{
char id[50] ;
char signtime[50];
char screenname[50];
}foruser;
typedef struct forfriends{
char myid[50];
char friendsid[50];
}forfriends;
typedef struct forword{
char userid[50];
char time[50];
char word[1000];
struct forword* next;
}forword;

typedef struct Adj {
  char id[50];
  struct Adj* next;
} Adj;
typedef struct Adj2 {
  char word[1000];
  char time[50];
  struct Adj2* next;
} Adj2;

typedef struct node{
    char id[50];
    char signtime[50];
    char screenname[50];
    Adj* friendsid;
    Adj* wholikesme;
    int numoflikesme;
    Adj2* word;
    struct node* next;
    struct node* prev;
    int numoffriends;
    int numofwords;
    int graphnum;
    int color;
    struct node* parent;
}node;

typedef struct wordnode{
    char wordname[1000];
    Adj* whoissiad;
    struct wordnode* next;
    struct wordnode* prev;
    int numofword;
} wordnode;

void initial(node* node){
    node->friendsid= NULL;
    node->word = NULL;
    node->next = NULL;
    node->prev= NULL;
    node->numoffriends=0;
    node->numofwords = 0;
    node->graphnum = -1;
    node->color = 0;
    node->parent = NULL;
    node->numoflikesme =0;
    node->wholikesme=0;
}
void initialize(wordnode* node){
    node->whoissiad = NULL;
    node->next = NULL;
    node->prev= NULL;
    node->numofword=0;
}


typedef struct List{
    node* header;
    node* last;
}List;


typedef struct wordList{
    wordnode* header;
    wordnode* last;
}wordList;


node* deletenode(struct List* lists, struct node* node){
    if(node->prev != NULL) node->prev->next = node->next;
    else lists->header = node->next;
    if(node->next!=NULL) node->next->prev = node->prev;
    if(lists->last == node) lists->last = node->prev;

    return node;
}

wordnode* delete_wordnode(struct wordList* lists, struct wordnode* node){
    if(node->prev != NULL) node->prev->next = node->next;
    else lists->header = node->next;
    if(node->next!=NULL) node->next->prev = node->prev;
    if(lists->last == node) lists->last = node->prev;

    return node;
}

void insert(struct List* lists, struct node* node){
    node->next = lists->header;
    if(lists->header != NULL)
        lists->header->prev = node;
    lists->header = node;
    node->prev = NULL;
    }


 void   insert_wordnode(struct wordList* lists,struct wordnode* node){
     node->next = lists->header;
    if(lists->header != NULL)
        lists->header->prev = node;
    lists->header = node;
    node->prev = NULL;
 }

void insert_bylast(struct List* lists, struct node* node){
    node->next = NULL;
    if(lists->last != NULL)
        lists->last->next = node;
    else lists->header = node;
    node->prev = lists->last;
    lists->last = node;
    }

 void   insert_wordnode_bylast(struct wordList* lists,struct wordnode* node){
    node->next = NULL;
    if(lists->last != NULL)
        lists->last->next = node;
    else lists->header = node;
    node->prev = lists->last;
    lists->last = node;
 }

node* search(struct List* list, char* id){
    node* x = list->header;
    while (x!= NULL&&strcmp(x->id,id)!=0)
        x= x->next;
    return x;
    }

wordnode* searchword(struct wordList* lists,char* word){
     wordnode* x = lists->header;
     while(x!=NULL&& strcmp(x->wordname,word)!=0)
        x= x->next;
    return x;
    }

Adj* searchid(struct Adj* lists,char* id){
    Adj* x = lists;
    while (x!= NULL && strcmp(x->id,id)!=0)
        x = x->next;
    return x;
    }

Adj* search_previd(struct Adj* lists,char* id){
    Adj* prev = lists;
    Adj* x = prev->next;
    while (prev!= NULL && strcmp(x->id,id)!=0 ){
        prev = prev->next;
        x = prev->next;
        if(x==NULL) return NULL;
        }
    return prev;
    }


int min_friend_search(struct List* list){
        node* x = list->header;
        int min = x->numoffriends;
        while (x!= NULL){
            if(x->numoffriends < min) min = x->numoffriends;
            x = x->next;}
        return min;
    }
    int min_word_search(struct List* list){
        node* x = list->header;
        int min = x->numofwords;
        while (x!= NULL){
            if(x->numofwords < min) min = x->numofwords;
            x = x->next;}
        return min;
    }
   int max_friend_search(struct List* list){
        node* x = list->header;
        int max = x->numoffriends;
        while (x!= NULL){
            if(x->numoffriends > max) max = x->numoffriends;
            x = x->next;}
        return max;
    }
    int max_word_search(struct List* list){
        node* x = list->header;
        int max = x->numofwords;
        while (x!= NULL){
            if(x->numofwords > max) max = x->numofwords;
            x = x->next;}
        return max;
    }

int read_data_files();
void display_statistics();
void merge_words(struct List* lists, int p, int q, int r);
void merge_bywords(struct wordList* lists, int p, int q, int r);
void mergesort_words(struct List* lists, int p, int r);
void mergesort_bywords(struct wordList* lists, int p, int r);
void copying(struct node* fake, struct node* org);
void copyingwords(struct wordnode* fake, struct wordnode* org);
void top5_most_tweeted_users();
void top5_max_tweeted_word();
void top5_max_tweeted_search(struct List* list);
Adj* pointer_of_whosaidit_ids;
void display_who_said_it(char* str);
void display_whosaidit_friends() ;
void remove_friends(struct List* lists, node* center);
int  remove_all_users_who_mentioned_a_word(char* string);


List list; List yeonsei; wordList wordslist;
int user_num, friends_num , word_num,i, kindwords;

int main()
{

    int select;
    char str[10000];
    list.header= NULL;
    yeonsei.header = NULL;
    wordslist.header = NULL;

    while(1){
    printf("Select Menu : ");
    scanf("%d",&select);

    switch(select){
    case 0: read_data_files(); break;
    case 1: display_statistics(); break;
    case 2: top5_max_tweeted_word(); break;
    case 3: top5_most_tweeted_users(); break;
    case 4: printf("If you want to know who tweeted a word, Insert the word : ");
            scanf("%s",str);
            strcat( str, "\n");
            display_who_said_it(str);
            break;
    case 5: display_whosaidit_friends(); break;
    case 6: printf("If you want to delete mentions of a word, Insert the word : ");
            scanf("%s",str);
            strcat( str, "\n");
            remove_all_mentions_a_word(str);break;
    case 7: printf("If you want to delete who tweeted a word, Insert the word : ");
            scanf("%s",str);
            strcat( str, "\n");
            remove_all_users_who_mentioned_a_word(str);
            break;
    case 8: break;
    case 9: printf("please insert id , then we will show its shortest path top5 : ");
            scanf("%s",str);
            strcat( str, "\n");
            shortest_path(str);
            break;
    case 99: goto lable; break;
    default: break;
    }
    }

    lable: printf("quit");
//top5_max_tweeted_search(&list); //3

    return 0;
}


int read_data_files(){

  //open files
    FILE * user = fopen("user.txt","rt");
    FILE * friends = fopen("friend.txt","rt");
    FILE * word = fopen("word.txt","rt");

    if(user == NULL){
        printf("user_not_load!");
        return -1;
    }
    if(friends == NULL){
        printf("user_not_load!");
        return -1;
    }
    if(word == NULL){
        printf("user_not_load!");
        return -1;
    }

    //read files
user_num=0, friends_num =0, word_num=0,i, kindwords=0;

  while(1)
    {
        foruser* user1= (foruser*)malloc(sizeof(foruser));
        fgets(user1->id,50,user);
        fgets(user1->signtime,50,user);
        fgets(user1->screenname,50,user);
        fgetc(user);
        if(feof(user)) break; user_num++;
        //new node insert
        node* node1 = (node*)malloc(sizeof(node)); initial(node1);
        strcpy(node1->id ,user1->id);
        strcpy(node1->signtime,user1->signtime);
        strcpy(node1->screenname, user1->screenname);
        insert(&list, node1);


    }

  while(1)
    {
        forfriends* friends1 = (forfriends*)malloc(sizeof(forfriends));
        fgets(friends1->myid,50,friends);
        fgets(friends1->friendsid,50,friends);
        fgetc(friends);
        if(feof(friends)) break;
        friends_num++;
        node* temp_node = search(&list,friends1->myid);
        Adj* a = (Adj *)malloc(sizeof(Adj));
        strcpy(a->id ,friends1->friendsid);
        a->next = temp_node->friendsid;
        temp_node->friendsid = a;
        temp_node->numoffriends++;

        node* temp_node2 = search(&list,friends1->friendsid);
        Adj* aa = (Adj *)malloc(sizeof(Adj));
        strcpy(aa->id ,friends1->myid);
        aa->next = temp_node2->wholikesme;
        temp_node2->wholikesme = aa;
        temp_node2->numoflikesme++;

    }

while(1)
    {
        forword word1;
        fgets(word1.userid,50,word);
        fgets(word1.time,50,word);
        fgets(word1.word,1000,word);
        fgetc(word);
        if(feof(word)) break; word_num++;
        node* temp_node = search(&list,word1.userid);
        Adj2* a = (Adj2*)malloc(sizeof(Adj2));
        strcpy(a->word ,word1.word);
        strcpy(a->time ,word1.time);
        a->next = temp_node->word;
        temp_node->word = a;
        temp_node->numofwords++;

    wordnode* temporary =searchword(&wordslist,word1.word);

        if(temporary!=NULL){
            temporary->numofword++;
            if(searchid(temporary->whoissiad , word1.userid)==NULL){
                Adj* aa = (Adj*)malloc(sizeof(Adj));
                strcpy(aa->id,word1.userid);
                aa->next = temporary->whoissiad;
                temporary->whoissiad = aa;
            }
        }
        else{ kindwords++;
            wordnode* wordn = (wordnode*)malloc(sizeof(wordnode));
            initialize(wordn);
            wordn->numofword++;
            strcpy(wordn->wordname ,word1.word);
            Adj* aa = (Adj*)malloc(sizeof(Adj));
            strcpy(aa->id,word1.userid);
            wordn->whoissiad = aa;
            insert_wordnode(&wordslist,wordn);
        }
 }

    printf("Total users: %d\n",user_num);
    printf("Total friendship records: %d\n", friends_num);
    printf("Total tweets: %d\n", word_num);

    return 0;}

void display_statistics(){
        int min, max;
        float average_friends = friends_num/user_num;
        printf("Average number of friends: %f\n",average_friends);
        min = min_friend_search(&list);
        max = max_friend_search(&list);
        printf("Minimum friends: %d\n", min);
        printf("Maximum number of friends: %d\n",max);

        float average_words = word_num/user_num;
        printf("Average tweets per user: %f\n", average_words);
        min = min_word_search(&list); max = max_word_search(&list);
        printf("Minimum tweets per user: %d\n",min);
        printf("Maximum tweets per user: %d\n",max);
    }

void merge_words(List* lists, int p, int q, int r){
        int i;
        List* list2 = (List*)malloc(sizeof(List)); list2->header = NULL; list2->last = NULL;
        List* list3 = (List*)malloc(sizeof(List)); list3->header = NULL; list3->last = NULL;

        node* x = lists->header;
        for(i=0; i<p;i++) x = x->next; //x는 p번째.
        int j=0,k=0;

        for(i=p; i<q+1; i++){
            node* copy = (node*)malloc(sizeof(node));
            copying(copy,x);
            insert_bylast(list2,copy);
            x= x->next;
        }

        for(i=q+1; i<r+1; i++){
            node* copy = (node*)malloc(sizeof(node));
            copying(copy,x);
           insert_bylast(list3,copy);
            x= x->next;
        }
        node fin1; fin1.numofwords = -1; insert_bylast(list2,&fin1);
        node fin2; fin2.numofwords = -1; insert_bylast(list3,&fin2);


        x= lists->header;
        for(i=0; i<p;i++)
            x = x->next;

        node* x1 = list2->header;
        node* x2 = list3->header;
        j=p; k= q+1;
        for(i=p;i<r+1;i++){
            if(x1->numofwords >= x2->numofwords){
                copying(x,x1);
                x1 = x1->next; j++;
            }
            else{
                copying(x,x2);
                x2= x2->next; k++;
            }
             x= x->next;
        }
  free(list2); free(list3);

  }


void merge_bywords(wordList* lists, int p, int q, int r){
        int i;
        wordList* list2 = (wordList*)malloc(sizeof(wordList)); list2->header = NULL; list2->last = NULL;
        wordList* list3 = (wordList*)malloc(sizeof(wordList)); list3->header = NULL; list3->last = NULL;

        wordnode* x = lists->header;
        for(i=0; i<p;i++) x = x->next; //x는 p번째.
        int j=0,k=0;

        for(i=p; i<q+1; i++){
            wordnode* copy = (wordnode*)malloc(sizeof(wordnode));
            copyingwords(copy,x);
            insert_wordnode_bylast(list2,copy);
            x= x->next;
        }

        for(i=q+1; i<r+1; i++){
            wordnode* copy = (wordnode*)malloc(sizeof(wordnode));
            copyingwords(copy,x);
           insert_wordnode_bylast(list3,copy);
            x= x->next;
        }
        wordnode fin1; fin1.numofword = -1; insert_wordnode_bylast(list2,&fin1);
        wordnode fin2; fin2.numofword = -1; insert_wordnode_bylast(list3,&fin2);


        x= lists->header;
        for(i=0; i<p;i++)
            x = x->next;

        wordnode* x1 = list2->header;
        wordnode* x2 = list3->header;
        j=p; k= q+1;
        for(i=p;i<r+1;i++){
            if(x1->numofword >= x2->numofword){
                copyingwords(x,x1);
                x1 = x1->next; j++;
            }
            else{
                copyingwords(x,x2);
                x2= x2->next; k++;
            }
             x= x->next;
        }
  free(list2); free(list3);

  }




void mergesort_words(List* lists, int p, int r){
      if(p<r){
        int q = (p+r)/2;
        mergesort_words(lists,p,q);
        mergesort_words(lists,q+1,r);
        merge_words(lists,p,q,r);
      }
  }

void mergesort_bywords(wordList* lists, int p, int r){
      if(p<r){
        int q = (p+r)/2;
        mergesort_bywords(lists,p,q);
        mergesort_bywords(lists,q+1,r);
        merge_bywords(lists,p,q,r);
      }
  }


void copying(struct node* fake,struct node* org){

     fake->friendsid = org->friendsid;
     strcpy(fake->id , org->id);
     fake->numoffriends = org ->numoffriends;
     fake->numofwords = org ->numofwords;
     strcpy(fake ->screenname, org->screenname);
     strcpy(fake->signtime, org->signtime);
     fake->word = org ->word;
     fake->color = org->color;
     fake->graphnum = org->graphnum;
     fake->parent = org->parent;
     fake->wholikesme = org->wholikesme;
     fake->numoflikesme = org->numoflikesme;
 }


void copyingwords(wordnode* fake, wordnode* org){

    fake->numofword = org->numofword;
    fake->whoissiad= org->whoissiad;
    strcpy(fake->wordname,org->wordname);

 }

void top5_most_tweeted_users(){
    mergesort_words(&list, 0, user_num-1);
    int l;
    node* who = list.header;
    for(l=1; l<6; l++){
    printf("top %d : tweeted %d times and user id :%s",l, who->numofwords, who->id); who = who->next;
 }

 }

void top5_max_tweeted_word(){
    mergesort_bywords(&wordslist, 0, kindwords-1);
    int l;
    wordnode* who = wordslist.header;
    for(l=1; l<6; l++){
    printf("top %d : %d times tweeted :: word %s",l, who->numofword, who->wordname); who = who->next;
 }
 }



void top5_max_tweeted_search(struct List* list){
        node* x = list->header;
        node* find;
        int max1 = 0;
        while (x!= NULL){
            if(x->numofwords > max1) { find = x; max1 = x->numofwords;}
            x = x->next;}
        printf("top1 is %s :tweet %d times\n",find->screenname,max1);

        x = list->header;
        int max2 = 0;
        while (x!= NULL){
            if(x->numofwords > max2 && x->numofwords < max1) { find = x; max2 = x->numofwords;}
            x = x->next;}
        printf("top2 is %s :tweet %d times\n",find->screenname,max2);

        x = list->header;
        int max3 = 0;
        while (x!= NULL){
            if(x->numofwords > max3 && x->numofwords < max2) { find = x; max3 = x->numofwords;}
            x = x->next;}
        printf("top3 is %s :tweet %d times\n",find->screenname,max3);

         x = list->header;
        int max4 = 0;
        while (x!= NULL){
            if(x->numofwords > max4 && x->numofwords < max3) { find = x; max4 = x->numofwords;}
            x = x->next;}
        printf("top4 is %s :tweet %d times\n",find->screenname,max4);

         x = list->header;
        int max5 = 0;
        while (x!= NULL){
            if(x->numofwords > max5 && x->numofwords < max4) { find = x; max5 = x->numofwords;}
            x = x->next;}
        printf("top5 is %s :tweet %d times\n",find->screenname,max5);
    }

void display_who_said_it(char* str){
    wordnode* x = searchword(&wordslist, str);

    if(x==NULL){printf("no person tweeted that word\n");  pointer_of_whosaidit_ids =NULL;}

    else{ pointer_of_whosaidit_ids = x->whoissiad;
            Adj* a = x->whoissiad;
        int num=1;
        while(a!=NULL) {
            printf("%d : this word tweeted by %s", num, a->id); num++;
            a = a->next;
            }

        }
    printf("---If one person tweeted the word many times, we omitted it for your convenience!----\n");

}

void display_whosaidit_friends(){
    Adj* temp = pointer_of_whosaidit_ids;
    if(temp==NULL) printf("no person who tweeted the word\n");
        while(temp!=NULL){
        node* id = search(&list,temp->id);
        Adj* friendsids = id->friendsid;

        printf("friend of %s",id->id);
        if(friendsids==NULL) printf("there are no friends of him\n");
        while(friendsids!=NULL){
                printf(":%s",friendsids->id);
                friendsids = friendsids->next;}

        temp = temp->next;

    }

}


int  remove_all_users_who_mentioned_a_word(char* string){
    wordnode* x = searchword(&wordslist, string);
    if(x==NULL) {printf("there are no person that tweeted that\n"); return 0;}

    Adj* ids = x->whoissiad;
    while(ids!=NULL){
        node* remove = search(&list,ids->id);
        remove_friends(&list, remove);
        remove_semifriends(&list, remove);
        word_num = word_num - remove->numofwords;
        deletenode(&list,remove); user_num--;
        ids = ids->next;
    } //node remove

    delete_wordnode(&wordslist,x); kindwords--;
    printf("remove complete!\n");
    return 0;
}


void remove_friends(struct List* lists, node* center){
    Adj* friends = center->wholikesme;
    while(friends!=NULL){
        node* friendnode = search(&list,friends->id);
        if(friendnode == NULL) break;

        if(strcmp(friendnode->friendsid->id,center->id)==0) {
            friendnode->friendsid = friendnode->friendsid->next;
            friendnode->numoffriends--;
        }
        else{
            Adj* temp = search_previd(friendnode->friendsid,center->id);
            if(temp!=NULL){
                if(temp->next!=NULL)
                    temp->next = temp->next->next;
                else temp->next = NULL;
                friendnode->numoffriends--;
                }
        }
        friends = friends->next;
    }
}

void remove_semifriends(struct List* lists, node* center){
    Adj* friends = center->friendsid;
    while(friends!=NULL){
        node* friendnode = search(&list,friends->id);
        if(friendnode == NULL) break;

        if(strcmp(friendnode->wholikesme->id,center->id)==0) {
            friendnode->wholikesme = friendnode->wholikesme->next;
            friendnode->numoffriends--;
        }
        else{
            Adj* temp = search_previd(friendnode->wholikesme,center->id);
            if(temp!=NULL){
                if(temp->next!=NULL)
                    temp->next = temp->next->next;
                else temp->next = NULL;
                friendnode->numoflikesme--;
                }
        }
        friends = friends->next;
    }
}




int  remove_all_mentions_a_word(char* string){
    wordnode* x = searchword(&wordslist, string);
    if(x==NULL) {printf("there are no person that tweeted that\n"); return 0;}

    Adj* ids = x->whoissiad;
    while(ids!=NULL){
        node* person = search(&list,ids->id);
        remove_mentions(person,string); word_num--;
        ids = ids->next;
    }

    delete_wordnode(&wordslist,x); kindwords--;
    printf("remove mentions complete!\n");
    return 0;
}

void remove_mentions(node* person, char* string){
    Adj2* prevmention = person->word;
    Adj2* mention = prevmention->next;
    if(strcmp(prevmention->word,string)==0){
            person->word = mention;
            person->numofwords--;
        }

        else{
            while(prevmention!=NULL){
                if(mention==NULL) break;
                else{
                        if(strcmp(mention->word,string)==0){
                            prevmention->next = mention->next;  person->numofwords--;}

                        prevmention= prevmention->next; mention = prevmention->next;
                }
            }
        }
}

void bfs(struct List* lists, node* start){
    start->color = 1;
    start->graphnum=0;
    start->parent = NULL;
    List* q = (List*)malloc(sizeof(List)); q->header = NULL; q->last = NULL;

    insert_bylast(q, start);
    while (q->header!= NULL) {
        node* fromqueue = deletenode(q, q->header);
        Adj* adj_v = fromqueue->friendsid;
        while(adj_v!= NULL) {
                node* friends = search(&list,adj_v->id);
                if(friends==NULL) {adj_v = adj_v ->next; continue;}
                if (friends->color == 0) { printf("in");
                    friends->color = 1;
                    friends->graphnum = fromqueue->graphnum + friends->numoffriends;
                    friends->parent = fromqueue;
                    node* copy = (node*)malloc(sizeof(node));
                    copying(copy,friends);
                    insert_bylast(q, copy); }
                    adj_v = adj_v->next;
            }
            fromqueue->color = 2;
    }
}



void mergesort_bygraphnum(struct List* lists, int p, int r){
      if(p<r){
        int q = (p+r)/2;
        mergesort_bygraphnum(lists,p,q);
        mergesort_bygraphnum(lists,q+1,r);
        merge_bygraphnum(lists,p,q,r);
      }
  }



void merge_bygraphnum(List* lists, int p, int q, int r){
        int i;
        List* list2 = (List*)malloc(sizeof(List)); list2->header = NULL; list2->last = NULL;
        List* list3 = (List*)malloc(sizeof(List)); list3->header = NULL; list3->last = NULL;

        node* x = lists->header;
        for(i=0; i<p;i++) x = x->next; //x는 p번째.
        int j=0,k=0;

        for(i=p; i<q+1; i++){
            node* copy = (node*)malloc(sizeof(node));
            copying(copy,x);
            insert_bylast(list2,copy);
            x= x->next;
        }

        for(i=q+1; i<r+1; i++){
            node* copy = (node*)malloc(sizeof(node));
            copying(copy,x);
           insert_bylast(list3,copy);
            x= x->next;
        }

        node fin1; fin1.graphnum= -3; insert_bylast(list2,&fin1);
        node fin2; fin2.graphnum = -3; insert_bylast(list3,&fin2);


        x= lists->header;
        for(i=0; i<p;i++)
            x = x->next;

        node* x1 = list2->header;
        node* x2 = list3->header;
        j=p; k= q+1;

        for(i=p;i<r+1;i++){
            if(x1->graphnum >= x2->graphnum){
                copying(x,x1);
                x1 = x1->next; j++;
            }
            else{
                copying(x,x2);
                x2= x2->next; k++;
            }
             x= x->next;
        }
  free(list2); free(list3);

  }

  int shortest_path(char* str){
      node* start = search(&list,str);
      if(start == NULL ) {printf("there are no person that has the id\n"); return 0;}

      bfs(&list, start);
      mergesort_bygraphnum(&list, 0, user_num-1);printf("!!");
      node* s = list.last;
      while(s->graphnum!=-10) s= s->prev;
      printf("from %d distance %s : %d distance to %s", s->graphnum, s->id);
      s= s->prev;
      int l;
      for(l=0;l<5;l++){
        if(s==NULL){printf("no more graph that linked!"); break;}
        printf("from %d distance %s : %d distance to %s", s->graphnum, s->id);
        s= s->prev;
      }
  } //109606650
