∗ What data structure you chose and why
-DOUBLY LINKED LIST : 전체적인 구조에 사용했다. (List, wordList)
                      NODE들의 삭제/ 삽입이 쉽기때문이다.
                      header 말고도 last도 지정해서 뒤로 insert하는 것도 가능하게 했다.
                      top 5 등 리스트 정렬을 해야 할때는 merge sort를 쉽게 구현 할 수 있고 빠를것이라고 생각해서 선택했다.
-LINKED LIST :  friendsid(친구목록), word(트윗목록), wholikesme(자신을 친구추가한 목록)에 사용했다. 
                doubly linked list보다 간단하기 때문이고 이동이 별로 없을것이라고 생각해서 선택했다.
                

∗ What is your expected performance
-mergesort : O(nlogn)의 성능을 기대했다.
-doubly linked list : last도 지정해서 앞이나 뒤에서 삽입/삭제가 가능하게했다. O(n)의 성능을 기대했다.
                      단순 연결리스트보다 더 빠른 performance를 기대했다.
-wordslist :단어에 대한 정보에 그 단어를 말한 사람의 id를 둔 리스트를 따로 하나 더 작성했다.
            그냥 id에 따른 노드에서 단어목록(트윗목록)을 뒤지지 않고도 누가 이 단어를 말했는지 바로 알수 있도록해서 더 빠른 속도로
            그 사람의 트윗목록 삭제 혹은 그 단어를 트윗한 사람 삭제 또는 탐색이 더 빨라질 거라고 기대했다.
-9번에서 다익스트라 : priority queue를 list + mergesort로 이용해서 heap을 이용하여 정렬하는 원래 방법 보다 오래걸렸을 것 같다.
                      
∗ How would you improve the system in the future
-search할때 처음부터 끝까지 다 살펴보아서 시간이 오래걸렸던것 같다. 
  balanced tree 을 사용하면 자동적으로 계속 정렬이 되니까 정렬할 시간도 줄고 search하는 시간도 훨씬 빨라질 것 같다.
-9번에서 다익스트라 알고리즘을 짤 때 heap을 제대로 짜서 정렬했더라면 더 좋은 performance가 되었을 것 같다. 나중에는 priority queue를 
 힙이나 트리를 이용해서 짜보면 더 좋을 것 같다.
-0번에서 들어오는 word나 friend에 따라서 시간이 너무 오래걸리는 것 같다.
 들어오는 수가 작으면 전혀 문제없이 돌아갈 수 있지만, 들어오는 수가 크면 word나 friend는 그냥 저장되는 것이 아니라
 id에 따라서 찾아야 하기때문이다. 또 wordlist를 만들기 위해서는 word도 있는 지 없는지 searching 해야한다. 그런데 이 서칭 알고리즘
 이 모든 노드를 기웃거리므로 O(n)정도가 걸리게 된다. 그렇기 때문에 그걸 n번 하게 되면 감당하기 힘든 것 같다.
 다음 번에는 서칭 알고리즘이 더 빠른 시간내에 될 수 있도록 트리나 힙을 사용하는 것이 좋다고 생각했다.
